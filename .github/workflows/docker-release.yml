name: Docker Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release"
        required: true
        default: "latest"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=${{ github.event.inputs.tag || 'latest' }}

      - name: Build and push production Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=production
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Create deployment manifest
        run: |
          cat > docker-compose.deploy.yml << EOF
          version: '3.8'
          services:
            aethermail:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name || 'latest' }}
              container_name: aethermail-prod
              restart: unless-stopped
              ports:
                - "4000:4000"
              environment:
                - NODE_ENV=production
              networks:
                - aethermail-network
          networks:
            aethermail-network:
              driver: bridge
          EOF

      - name: Upload deployment manifest
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-deploy
          path: docker-compose.deploy.yml

  deploy-demo:
    needs: release
    runs-on: ubuntu-latest
    if: github.event.release.prerelease == false
    environment: demo

    steps:
      - name: Download deployment manifest
        uses: actions/download-artifact@v4
        with:
          name: docker-compose-deploy

      - name: Deploy to demo environment
        run: |
          echo "Deploying to demo environment..."
          # Add your deployment commands here
          # Example: scp docker-compose.deploy.yml user@demo-server:/path/to/app/
          # Example: ssh user@demo-server "cd /path/to/app && docker-compose -f docker-compose.deploy.yml up -d"
