// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./data/aethermail.db"
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  password      String?
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  imap          ImapConfig?
  smtp          SmtpConfig?
  folders       Folder[]
  emails        Email[]
  // Better Auth fields
  accounts      Account[]
  sessions      Session[]
  @@index([username], map: "username_index")
  @@index([email], map: "email_index")
}

model Account {
  id                String  @id @default(cuid())
  accountId         String
  providerId        String
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  @@unique([providerId, accountId])
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([token])
}

model ImapConfig {
  id     Int     @id @default(autoincrement())
  host   String
  port   Int
  tls    Boolean
  imapUser String
  imapPass String
  userId String  @unique
  user   User    @relation(fields: [userId], references: [id])
}

model SmtpConfig {
  id     Int     @id @default(autoincrement())
  host   String
  port   Int
  secure Boolean
  smtpUser String
  smtpPass String
  userId String  @unique
  user   User    @relation(fields: [userId], references: [id])
}

model Folder {
  id     Int     @id @default(autoincrement())
  name   String
  userId String
  user   User    @relation(fields: [userId], references: [id])
  emails Email[]
}

model Email {
  id        Int      @id @default(autoincrement())
  subject   String
  body      String
  from      String
  to        String
  cc        String?
  bcc       String?
  sentAt    DateTime @default(now())
  folderId  Int
  folder    Folder   @relation(fields: [folderId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  attachments Attachment[]
  @@index([sentAt], map: "sentAt_index")
}

model Attachment {
  id       Int    @id @default(autoincrement())
  filename String
  filetype String
  filesize Int
  emailId  Int
  email    Email  @relation(fields: [emailId], references: [id])
}

